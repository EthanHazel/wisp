name: Deploy to Vercel
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  deploy:
    if: github.repository == 'WispTools/wisp-web'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone wisp-modules into public
        run: |
          mkdir -p public/modules
          git clone --depth 1 https://github.com/WispTools/wisp-modules.git temp_wisp_modules
          mv temp_wisp_modules/* temp_wisp_modules/.* public/ 2>/dev/null || true
          rm -rf temp_wisp_modules
          echo "Successfully cloned wisp-modules into the public folder."

      - name: Verify cloned files
        run: ls -la public/modules

      - name: Remove unwanted files from wisp-modules
        run: |
          while IFS= read -r line; do
            rm -rf "public/$line"
            echo "Removed: public/$line"
          done < public/.webpurge
          rm -rf public/.webpurge
          echo "Removed .webpurge file"
          echo "Successfully removed unwanted files from wisp-modules."

      - name: Read package.json version and increment
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          OFFSET=$(node -p "require('./verOffset').versionOffset")
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
          MINOR_VERSION=$(((git rev-list --count HEAD) - $OFFSET))
          echo "Minor version: $(git rev-list --count HEAD)"
          echo "Major version: $VERSION"
          echo "Whole version: $MAJOR_VERSION.$MINOR_VERSION"
          echo "new_version=$MAJOR_VERSION.$MINOR_VERSION" >> $GITHUB_OUTPUT

      - name: Create distData directory
        run: |
          mkdir -p src/distData

      - name: Build project version file
        run: |
          echo '{"version": "${{ steps.version.outputs.new_version }}"}' > src/distData/version.json
          cat src/distData/version.json

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy project artifacts to Vercel
        run: |
          OUTPUT=$(du --inodes -d 5 .vercel/output)
          echo "$OUTPUT"
          LAST=$(echo "$OUTPUT" | tail -n 1)
          PERCENTAGE=$(echo "$LAST" | awk 'BEGIN {maxtotal=15000} { printf "%.2f%%", ($1/maxtotal*100) }')
          echo "Vercel file usage percentage" >> $GITHUB_STEP_SUMMARY
          echo "$PERCENTAGE" >> $GITHUB_STEP_SUMMARY
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
